# -*- coding: utf-8 -*-
"""Python Original.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-xBuxrDOzgz0jDz5vj3BRR8Os5DRacaO
"""

#import the necessary libraries for initial analysis
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl  
import numpy as np
import seaborn as sns
from sklearn.impute import SimpleImputer 
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import OrdinalEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import MinMaxScaler

#import the dataset into colab
from google.colab import files
uploaded = files.upload()

# Store Dataset in a Pandas Dataframe
import io
df = pd.read_csv(io.BytesIO(uploaded['sales_data (1).csv']))

#understand the data by running head, tail, decribe and info functions
df.head()

df.tail()

df.describe()

df.describe(include=object)

df.info()

#view how many missing values are in education, marriage and house_owner columns 
education_nan_count = df['education'].isna().sum()
marriage_nan_count = df['marriage'].isna().sum()
house_owner_nan_count = df["house_owner"].isna().sum()

print("The number of values missing from the education column is: " + str(education_nan_count))
print("The number of values missing from the marriage column is: " + str(marriage_nan_count))
print("The number of values missing from the house owner column: " + str(house_owner_nan_count))

#value count for the variables to identify noticeable outliers, missing data and likely important variables
#value count for flag to see the distribution of product purchase (Yes or no)
df['flag'].value_counts()

#visualisation of flag values
df.flag.value_counts().plot.barh()

#value count for gender to see the 3rd unique value as it is usually 2 (Male or Female)
``

#value count for child as it has 4 classifications when it should have 3.
df['child'].value_counts()

#visualising the child variables
plt.plot(df.child.value_counts())
plt.ylabel('child')
plt.show()

#value count for house value as it has a minimum amount of 0 and houses usually have some cost
df['house_val'].value_counts()

#visualisation to show the zero values in house value 
sns.distplot(df['house_val'])

#run value count for the variables with missing values
df['education'].value_counts()

df['marriage'].value_counts()

df['house_owner'].value_counts()

#transform all the categorical values to numerical and change strings/objects to intergers 
#changing flag values
df.flag = df.flag.map(dict(N=0, Y=1))

df['age'] = df['age'].str.replace('_', '').str.replace('<','').str.replace('=', '').str.replace('>','')

df['education'] = df['education'].str.replace('.', '').str.replace('<','')

#changing age values
df['age'] = df['age'].replace("1Unk", 1)
df['age'] = df['age'].replace("225", 2)
df['age'] = df['age'].replace("335", 3)
df['age'] = df['age'].replace("445", 4)
df['age'] = df['age'].replace("555", 5)
df['age'] = df['age'].replace("665", 6)
df['age'] = df['age'].replace("765", 7)

#changing gender values
df.gender = df.gender.map(dict(M=0, F=1, U= 2))

#changing online values
df.online = df.online.map(dict(N=0, Y=1))

#changing the values of marriage
df.marriage = df.marriage.map(dict(Single=0, Married=1))

#changing child values since 0 also means no children, we will change both N and 0 to 0 so they can merge. 
df['child'] = df['child'].replace("N", 0)
df['child'] = df['child'].replace("0", 0)
df['child'] = df['child'].replace("Y", 1)
df['child'] = df['child'].replace("U", 2)

#value count to show that it has changes
df['child'].value_counts()

#changing the values of house_owner
df['house_owner'] = df['house_owner'].replace("Renter", 0)
df['house_owner'] = df['house_owner'].replace("Owner", 1)

#changing the values of education
df['education'] = df['education'].replace("0 HS", 0)
df['education'] = df['education'].replace("1 HS", 1)
df['education'] = df['education'].replace("2 Some College", 2)
df['education'] = df['education'].replace("3 Bach", 3)
df['education'] = df['education'].replace("4 Grad", 4)

#changing the values of occupation
df['occupation'] = df['occupation'].replace("Farm", 0)
df['occupation'] = df['occupation'].replace("Retired", 1)
df['occupation'] = df['occupation'].replace("Blue Collar", 2)
df['occupation'] = df['occupation'].replace("Sales/Service", 3)
df['occupation'] = df['occupation'].replace("Professional", 4)
df['occupation'] = df['occupation'].replace("Others", 5)

#changing the values of region
df['region'] = df['region'].replace("South", 0)
df['region'] = df['region'].replace("West", 1)
df['region'] = df['region'].replace("Midwest", 2)
df['region'] = df['region'].replace("Northeast", 3)
df['region'] = df['region'].replace("Rest", 4)

#changing the values of mortgage
df['mortgage'] = df['mortgage'].replace("1Low", 1)
df['mortgage'] = df['mortgage'].replace("2Med", 2)
df['mortgage'] = df['mortgage'].replace("3High", 3)

#encode family income to establish hierarchy and return as numerical
enc = OrdinalEncoder()
df["fam_income"] = enc.fit_transform(df[["fam_income"]])

#view value count of family income to access this
df['fam_income'].value_counts()

#replace the missing values in education and marriage with others and assigning them a value
df['education'].fillna('Other', inplace = True)
df['marriage'].fillna('Other', inplace = True)

#replace other with a value 5 and 2 for Education and marriage respectively
df['education']= df['education'].replace("Other", 5)
df['marriage']= df['marriage'].replace("Other", 2)

#value count to show that changes in marriage and education has been sorted
df['marriage'].value_counts()

df['education'].value_counts()

#visualisation to show relationship between 2 categorical variables
CrosstabResult=pd.crosstab(index=df['house_owner'],columns=df['mortgage'])
print(CrosstabResult)
CrosstabResult.plot.bar()

#fill na in house owner with 3
df['house_owner']=df['house_owner'].fillna(3)

#show that the above change has been effected
df['house_owner'].value_counts()

#format based on condition
df['house_owner'] = np.where((df['mortgage'] == 1) & (df['house_owner'] == 3), 0, df['house_owner'])
df['house_owner'] = np.where((df['mortgage'] == 2) & (df['house_owner'] == 3), 1, df['house_owner'])
df['house_owner'] = np.where((df['mortgage'] == 3) & (df['house_owner'] == 3), 1, df['house_owner'])

#show that changes have been effected
df['house_owner'].value_counts()

#replace the '0' values in house value with the median of house value grouped by region.
df.groupby(['region'])['house_val'].median()

df['house_val'] = np.where((df['region'] == 0) & (df['house_val'] == 0), 201815.5, df['house_val'])
df['house_val'] = np.where((df['region'] == 1) & (df['house_val'] == 0), 304785.0, df['house_val'])
df['house_val'] = np.where((df['region'] == 2) & (df['house_val'] == 0), 153733.0, df['house_val'])
df['house_val'] = np.where((df['region'] == 3) & (df['house_val'] == 0), 246754.0, df['house_val'])
df['house_val'] = np.where((df['region'] == 4) & (df['house_val'] == 0), 324983.0, df['house_val'])

#show that changes have been effected
df['house_val'].value_counts()

#showing that the data has been cleaned and updated
df.info()

#convert floats to integer
df['education'] = pd.to_numeric(df['education']).astype('Int64')
df['marriage'] = pd.to_numeric(df['marriage']).astype('Int64')
df['house_owner'] = pd.to_numeric(df['house_owner']).astype('Int64')
df['fam_income'] = pd.to_numeric(df['fam_income']).astype('Int64')

df.info()

df.head()

df.describe()

#visualisation to show relationships
pd.crosstab(df.child, df.flag).plot(kind='bar')
plt.title('Relationship between dependents(presence or absence of children) and customer purchase of life insurance')
plt.xlabel('Children')
plt.ylabel('Frequency')

sns.boxplot(x='flag',y='education',data=df ,palette='rainbow')

pd.crosstab(df.education, df.flag).plot(kind='bar')
plt.title('Relationship between Education and customer purchase of life insurance')
plt.xlabel('Education')
plt.ylabel('Frequency')

pd.crosstab(df.age,df.flag).plot(kind='bar')
plt.title('Relationship between Customer Purchase of life Insurance and Age')
plt.xlabel('Age')
plt.ylabel('Frequency')

pd.crosstab(df.fam_income, df.flag).plot(kind='bar')
plt.title('Relationship between Family Income and customer purchase of life insurance')
plt.xlabel('Income')
plt.ylabel('Frequency')

pd.crosstab(df.region, df.flag).plot(kind='bar')
plt.title('Relationship between Region and customer purchase of life insurance')
plt.xlabel('Region')
plt.ylabel('Frequency')

sns.catplot(data= df, x="flag", y="house_val", hue="flag", kind="bar")

#create a pivot table 
result = pd.pivot_table(data=df, index = 'fam_income', columns ='age', values='flag')
print(result)

#create heat map of family income and age against flag value
sns.heatmap(result,annot=True,cmap ='YlGnBu').set_title('Heatmap showing how Customer purchase of life insurance is affected by family income and age')

#create pivot table and show heat map of Education and Child against flag value
result2 = pd.pivot_table(data=df, index = 'education', columns ='child', values='flag')
sns.heatmap(result2,annot=True,cmap ='Pastel1').set_title('Heatmap showing how Customer purchase of life insurance is affected by Education and Children')

#create pivot table and show heat map of Region and Mortgage against flag value
result3 = pd.pivot_table(data=df, index = 'region', columns ='mortgage', values='flag')
sns.heatmap(result3,annot=True,cmap ='OrRd_r').set_title('Heatmap showing how Customer purchase of life insurance is affected by Region and Mortgage')

`#scale house value
scale = MinMaxScaler()

X = df[['house_val']]

df['house_val']= scale.fit_transform(X)

#start machine learning
#I will be using using decision treee, random forest and logistic regression 
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score,precision_score,confusion_matrix,classification_report
from sklearn.preprocessing import RobustScaler
from sklearn.model_selection import StratifiedKFold

#define the dependent (y) and independent (x) variables
y = df.flag
x = df.drop('flag', axis=1)

# implementing train-test-split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state= 11)

#decision tree model
#decision tree
decision_tree = DecisionTreeClassifier()
decision_tree.fit(x_train, y_train)
Y_pred = decision_tree.predict(x_test)
acc_decision_tree = round(decision_tree.score(x_train, y_train) * 100, 2)
acc_decision_tree

print(classification_report(y_test, Y_pred))
print(confusion_matrix(y_test,Y_pred))

rf = RandomForestClassifier(n_estimators=100)
rf.fit(x_train, y_train)
Y_pred = rf.predict(x_test)
acc_rf = round(rf.score(x_train, y_train) * 100, 2)
acc_rf

print(classification_report(y_test, Y_pred))
print(confusion_matrix(y_test,Y_pred))

logreg = LogisticRegression()
logreg.fit(x_train, y_train)
Y_pred = logreg.predict(x_test)
acc_log = round(logreg.score(x_train, y_train) * 100, 2)
acc_log

print(classification_report(y_test, Y_pred))
print(confusion_matrix(y_test,Y_pred))

#cross validation
rf_cv_score = cross_val_score(rf, x, y, cv=10, scoring= "roc_auc").mean()
print(rf_cv_score)
print('\n')

decisiontree_cv_score = cross_val_score(decision_tree, x, y, cv=10, scoring= "roc_auc").mean()
print(decisiontree_cv_score)
print('\n')

logreg_cv_score = cross_val_score(logreg, x, y, cv=10, scoring= "roc_auc").mean()
print(logreg_cv_score)
print('\n')